---
- name: Get pre-requisites
  pip:
    executable: "pip3"
    name: ['boto', 'boto3', 'botocore']
    umask: "0022"

- name: Link /etc/localtime to Europe/London timezone
  ansible.builtin.file:
    src: /usr/share/zoneinfo/Europe/London
    dest: /etc/localtime
    state: link
    force: yes
    
- name: Set timezone to Europe/London
  timezone:
    name: Europe/London

- name: Add Amazon Corretto Yum repository
  become: yes
  get_url:
    url: https://yum.corretto.aws/corretto.repo
    dest: /etc/yum.repos.d/corretto.repo
    mode: '0644'

- name: Install Amazon Corretto 21 (full JDK including javac)
  become: yes
  yum:
    name: java-21-amazon-corretto-devel
    state: present
    lock_timeout: 60

- name: Set system-wide JAVA_HOME and update PATH
  become: yes
  copy:
    dest: /etc/profile.d/java.sh
    content: |
      export JAVA_HOME=/usr/lib/jvm/java-21-amazon-corretto
      export PATH=$JAVA_HOME/bin:$PATH
    mode: '0755'

- name: Verify Java installation
  shell: java -version
  register: java_version_output
  changed_when: false
  ignore_errors: yes

- name: Show installed Java version
  debug:
    var: java_version_output.stdout_lines

- name: Verify javac is available
  become: yes
  shell: which javac
  register: javac_check
  changed_when: false
  failed_when: javac_check.rc != 0

- name: Show javac path
  debug:
    msg: "javac found at: {{ javac_check.stdout }}"

- name: Create user groups
  ansible.builtin.group:
    name: '{{ item.group | default(omit) }}'
    gid: '{{ item.gid | default(omit) }}'
    state: present
  with_items: '{{ users }}'

- name: Create users
  ansible.builtin.user:
    name: "{{ item.name }}"
    groups: "{{ item.group | default(omit) }}"
    create_home: "{{ item.create_home | default('yes') }}"
    shell: "{{ item.shell | default(omit) }}"
    state: present
  loop: "{{ users }}"

- name: Install dependancies
  yum:
    name: "{{ item }}"
    state: present
    lock_timeout: 60
  loop: "{{ package_installs }}"

- name: Download fonts from S3
  vars:
    ansible_python_interpreter: /usr/bin/python3
  amazon.aws.aws_s3:
    bucket: "{{ aws_s3_resource_bucket }}"
    object: "chl-fes/fes-fonts-{{ fonts_version }}.tar"
    dest: "{{ fonts_path }}/fes-fonts-{{ fonts_version }}.tar"
    mode: get
    overwrite: different
    aws_access_key: "{{ aws_s3_resource_bucket_access_key | default(omit) }}"
    aws_secret_key: "{{ aws_s3_resource_bucket_secret_key | default(omit) }}"

- name: Unarchive fonts
  ansible.builtin.unarchive:
    src: "{{ fonts_path }}/fes-fonts-{{ fonts_version }}.tar"
    dest: "{{ fonts_path }}"
    remote_src: yes

- name: Download tomcat from S3
  vars:
    ansible_python_interpreter: /usr/bin/python3
  amazon.aws.aws_s3:
    bucket: "{{ aws_s3_resource_bucket }}"
    object: "chl-fes/apache-tomcat-{{ tomcat_version }}.tar.gz"
    dest: "/tmp/apache-tomcat-{{ tomcat_version }}.tar.gz"
    mode: get
    overwrite: different
    aws_access_key: "{{ aws_s3_resource_bucket_access_key | default(omit) }}"
    aws_secret_key: "{{ aws_s3_resource_bucket_secret_key | default(omit) }}"

- name: Create tomcat directory
  ansible.builtin.file:
    path: "{{ tomcat_path }}"
    state: directory
    mode: '0755'    

- name: Unarchive tomcat
  ansible.builtin.unarchive:
    src: "/tmp/apache-tomcat-{{ tomcat_version }}.tar.gz"
    dest: "{{ tomcat_path }}"
    remote_src: yes
    owner: tomcat
    group: tomcat

- name: Create Symlinks
  ansible.builtin.file:
    src: "{{ tomcat_path }}/apache-tomcat-{{ tomcat_version }}"
    dest: "{{ tomcat_path }}/{{ item }}"
    state: link
    owner: tomcat
    group: tomcat
  loop: 
    - "tomcat"
    - "latest"
    - "tomcat-latest"
    - "tomcat-{{ tomcat_version.split('.')[0] }}"
    
- name: Remove examples 
  ansible.builtin.file:
    path: "{{ tomcat_path }}/apache-tomcat-{{ tomcat_version }}/webapps/examples/"
    state: absent
    
- name: Template service file
  ansible.builtin.template:
    src: templates/tomcat_service.j2
    dest: "/etc/systemd/system/tomcat.service"
    owner: root
    group: root
    mode: "0644"

- name: Ensure service is disabled
  ansible.builtin.service:
    name: tomcat.service
    enabled: no

- name: Copy deployment scripts to server for later use
  copy:
    src: "{{ item }}"
    dest: "{{ ansible_deploy_playbook_directory }}/{{ item | basename }}"
    mode: 0755
  loop:
    - deployment-scripts/frontend_deployment.yml

- name: Setup deployment playbook dependancies (1/2)
  copy:
    src: "{{ item }}"
    dest: "{{ ansible_deploy_playbook_directory }}/"
    mode: 0755
  loop: 
    - requirements.yml

- name: Setup deployment playbook dependancies (2/2)
  command: "/usr/local/bin/ansible-galaxy install -f -r {{ansible_deploy_playbook_directory}}/requirements.yml"
  register: requirements_output
  changed_when: '"was installed successfully" in requirements_output.stdout'

